/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: edcpayload.proto */

#ifndef PROTOBUF_C_edcpayload_2eproto__INCLUDED
#define PROTOBUF_C_edcpayload_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _EdcPayload EdcPayload;
typedef struct _EdcPayload__EdcMetric EdcPayload__EdcMetric;
typedef struct _EdcPayload__EdcPosition EdcPayload__EdcPosition;


/* --- enums --- */

typedef enum _EdcPayload__EdcMetric__ValueType {
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__DOUBLE = 0,
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__FLOAT = 1,
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__INT64 = 2,
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__INT32 = 3,
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__BOOL = 4,
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__STRING = 5,
  EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE__BYTES = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EDC_PAYLOAD__EDC_METRIC__VALUE_TYPE)
} EdcPayload__EdcMetric__ValueType;

/* --- messages --- */

struct  _EdcPayload__EdcMetric
{
  ProtobufCMessage base;
  char *name;
  EdcPayload__EdcMetric__ValueType type;
  protobuf_c_boolean has_double_value;
  double double_value;
  protobuf_c_boolean has_float_value;
  float float_value;
  protobuf_c_boolean has_long_value;
  int64_t long_value;
  protobuf_c_boolean has_int_value;
  int32_t int_value;
  protobuf_c_boolean has_bool_value;
  protobuf_c_boolean bool_value;
  char *string_value;
  protobuf_c_boolean has_bytes_value;
  ProtobufCBinaryData bytes_value;
};
#define EDC_PAYLOAD__EDC_METRIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&edc_payload__edc_metric__descriptor) \
    , NULL, 0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,{0,NULL} }


struct  _EdcPayload__EdcPosition
{
  ProtobufCMessage base;
  double latitude;
  double longitude;
  protobuf_c_boolean has_altitude;
  double altitude;
  protobuf_c_boolean has_precision;
  double precision;
  protobuf_c_boolean has_heading;
  double heading;
  protobuf_c_boolean has_speed;
  double speed;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  protobuf_c_boolean has_satellites;
  int32_t satellites;
  protobuf_c_boolean has_status;
  int32_t status;
};
#define EDC_PAYLOAD__EDC_POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&edc_payload__edc_position__descriptor) \
    , 0, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _EdcPayload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  EdcPayload__EdcPosition *position;
  size_t n_metric;
  EdcPayload__EdcMetric **metric;
  protobuf_c_boolean has_body;
  ProtobufCBinaryData body;
};
#define EDC_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&edc_payload__descriptor) \
    , 0,0, NULL, 0,NULL, 0,{0,NULL} }


/* EdcPayload__EdcMetric methods */
void   edc_payload__edc_metric__init
                     (EdcPayload__EdcMetric         *message);
/* EdcPayload__EdcPosition methods */
void   edc_payload__edc_position__init
                     (EdcPayload__EdcPosition         *message);
/* EdcPayload methods */
void   edc_payload__init
                     (EdcPayload         *message);
size_t edc_payload__get_packed_size
                     (const EdcPayload   *message);
size_t edc_payload__pack
                     (const EdcPayload   *message,
                      uint8_t             *out);
size_t edc_payload__pack_to_buffer
                     (const EdcPayload   *message,
                      ProtobufCBuffer     *buffer);
EdcPayload *
       edc_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   edc_payload__free_unpacked
                     (EdcPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*EdcPayload__EdcMetric_Closure)
                 (const EdcPayload__EdcMetric *message,
                  void *closure_data);
typedef void (*EdcPayload__EdcPosition_Closure)
                 (const EdcPayload__EdcPosition *message,
                  void *closure_data);
typedef void (*EdcPayload_Closure)
                 (const EdcPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor edc_payload__descriptor;
extern const ProtobufCMessageDescriptor edc_payload__edc_metric__descriptor;
extern const ProtobufCEnumDescriptor    edc_payload__edc_metric__value_type__descriptor;
extern const ProtobufCMessageDescriptor edc_payload__edc_position__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_edcpayload_2eproto__INCLUDED */
